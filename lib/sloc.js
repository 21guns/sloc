// Generated by CoffeeScript 1.3.3

/*
This program is distributed under the terms of the GPLv3 license.
Copyright 2012 (c) Markus Kohlhase <mail@markus-kohlhase.de>
*/


(function() {
  var sharpComment, slashComment, slashStarComment, starSlashComment, trippleQuoteComment, trippleSharpComment, whiteSpaceLine;

  whiteSpaceLine = new RegExp(/^\s*$/);

  sharpComment = new RegExp(/^\s*\#/);

  slashComment = new RegExp(/^\s*\//);

  trippleSharpComment = new RegExp(RegExp("^\\s*\\#{3}"));

  slashStarComment = new RegExp(/^\s*\/\*+/);

  starSlashComment = new RegExp(/^\s*\*+\/{1}/);

  trippleQuoteComment = new RegExp(/^\s*(\"{3}|\'{3})/);

  module.exports = function(code, lang) {
    var bCounter, cCounter, comment, commentLineNumbers, i, l, lines, loc, nloc, nr, nullLineNumbers, sloc, start, startLine, startMultiLineComment, stopMultiLineComment, x, _i, _j, _len;
    if (typeof code !== "string") {
      throw new TypeError("'code' has to be a string");
    }
    switch (lang) {
      case "coffeescript":
      case "coffee":
        startMultiLineComment = trippleSharpComment;
        stopMultiLineComment = trippleSharpComment;
        comment = sharpComment;
        break;
      case "javascript":
      case "js":
        startMultiLineComment = slashStarComment;
        stopMultiLineComment = starSlashComment;
        comment = slashComment;
        break;
      case "python":
      case "py":
        comment = sharpComment;
        startMultiLineComment = trippleQuoteComment;
        stopMultiLineComment = trippleQuoteComment;
        break;
      default:
        startMultiLineComment = slashStarComment;
        stopMultiLineComment = starSlashComment;
        comment = slashComment;
    }
    commentLineNumbers = [];
    nullLineNumbers = [];
    lines = code.split('\n');
    loc = lines.length;
    nloc = ((function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        l = lines[i];
        if (!(whiteSpaceLine.test(l))) {
          continue;
        }
        nullLineNumbers.push(i);
        _results.push(l);
      }
      return _results;
    })()).length;
    start = false;
    cCounter = 0;
    bCounter = 0;
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      l = lines[i];
      if (startMultiLineComment.test(l) && start === false) {
        start = true;
        startLine = i;
      } else if (stopMultiLineComment.test(l) && start === true) {
        start = false;
        x = i - startLine + 1;
        for (nr = _j = startLine; startLine <= i ? _j <= i : _j >= i; nr = startLine <= i ? ++_j : --_j) {
          commentLineNumbers.push(nr);
        }
        bCounter += x;
      } else if (comment.test(l)) {
        cCounter++;
        commentLineNumbers.push(i);
      }
    }
    cCounter += bCounter;
    sloc = loc - cCounter - nloc;
    return {
      loc: loc,
      sloc: sloc,
      cloc: cCounter,
      bcloc: bCounter,
      nloc: nloc
    };
  };

}).call(this);
