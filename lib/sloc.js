// Generated by CoffeeScript 1.7.1

/*
This program is distributed under the terms of the GPLv3 license.
Copyright 2012 - 2014 (c) Markus Kohlhase <mail@markus-kohlhase.de>
 */

(function() {
  var combine, doubleHyphenComment, doubleSlashComment, doubleSquareBracketClose, doubleSquareBracketOpen, getEmptyLinesCount, keys, sharpComment, singleLineHtmlComment, singleLineSlashStarComment, slashStarComment, slocModule, starSlashComment, startHtmlComment, stopHtmlComment, trippleQuoteComment, trippleSharpComment, whiteSpaceLine;

  keys = ['loc', 'sloc', 'cloc', 'scloc', 'mcloc', 'nloc'];

  whiteSpaceLine = /^\s*$/;

  sharpComment = /^\s*\#/;

  doubleSlashComment = new RegExp(/^\s*\/{2}/);

  doubleHyphenComment = new RegExp(/^\s*-{2}/);

  doubleSquareBracketOpen = new RegExp(/\[{2}/);

  doubleSquareBracketClose = new RegExp(/\]{2}/);

  trippleSharpComment = new RegExp(RegExp("^\\s*\\#{3}"));

  slashStarComment = new RegExp(/^\s*\/\*+(?!.*\*\/).*$/);

  singleLineSlashStarComment = new RegExp(/^\s*\/\*+.*\*+\/{1}\s*$/);

  starSlashComment = new RegExp(/^.*\*\/{1}\s*$/);

  trippleQuoteComment = new RegExp(/^\s*(\"{3}|\'{3})/);

  combine = function(r1, r2, type) {
    if (type == null) {
      type = '|';
    }
    return new RegExp(r1.toString().slice(1, -1) + type + r2.toString().slice(1, -1));
  };

  singleLineHtmlComment = new RegExp(/^\s*<!--.*-->\s*$/);

  startHtmlComment = new RegExp(/^\s*<!--(?!.*-->).*$/);

  stopHtmlComment = new RegExp(/-->\s*$/);

  getEmptyLinesCount = function(lines) {
    var i, l;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        l = lines[i];
        if (whiteSpaceLine.test(l)) {
          _results.push(i);
        }
      }
      return _results;
    })()).length;
  };

  slocModule = function(code, lang) {
    var bCounter, cCounter, comment, i, l, lines, loc, nloc, nullLineNumbers, sloc, start, startLine, startMultiLineComment, stopMultiLineComment, totalC, x, _i, _len;
    if (typeof code !== "string") {
      throw new TypeError("'code' has to be a string");
    }
    switch (lang) {
      case "coffeescript":
      case "coffee":
      case "python":
      case "py":
        comment = sharpComment;
        break;
      case "javascript":
      case "js":
      case "c":
      case "cc":
      case "java":
      case "php":
      case "php5":
      case "go":
      case "scss":
      case "less":
      case "styl":
      case "stylus":
        comment = combine(doubleSlashComment, singleLineSlashStarComment);
        break;
      case "css":
        comment = singleLineSlashStarComment;
        break;
      case "html":
        comment = singleLineHtmlComment;
        break;
      case "lua":
        comment = doubleHyphenComment;
        break;
      default:
        comment = doubleSlashComment;
    }
    switch (lang) {
      case "coffeescript":
      case "coffee":
        startMultiLineComment = trippleSharpComment;
        stopMultiLineComment = trippleSharpComment;
        break;
      case "javascript":
      case "js":
      case "c":
      case "cc":
      case "java":
      case "php":
      case "php5":
      case "go":
      case "css":
      case "scss":
      case "less":
      case "styl":
      case "stylus":
        startMultiLineComment = slashStarComment;
        stopMultiLineComment = starSlashComment;
        break;
      case "python":
      case "py":
        startMultiLineComment = trippleQuoteComment;
        stopMultiLineComment = trippleQuoteComment;
        break;
      case "html":
        startMultiLineComment = startHtmlComment;
        stopMultiLineComment = stopHtmlComment;
        break;
      case "lua":
        startMultiLineComment = combine(doubleHyphenComment, doubleSquareBracketOpen, '');
        stopMultiLineComment = combine(doubleHyphenComment, doubleSquareBracketClose, '');
        break;
      default:
        throw new TypeError("File extension '" + lang + "' is not supported");
    }
    nullLineNumbers = [];
    lines = code.split('\n');
    loc = lines.length;
    nloc = getEmptyLinesCount(lines);
    start = false;
    cCounter = 0;
    bCounter = 0;
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      l = lines[i];
      if (start === false && startMultiLineComment.test(l)) {
        start = true;
        startLine = i;
      } else if (start === true && stopMultiLineComment.test(l)) {
        start = false;
        x = i - startLine + 1;
        bCounter += x;
      } else if (start === false && comment.test(l)) {
        cCounter++;
      }
    }
    sloc = loc - cCounter - bCounter - nloc;
    totalC = cCounter + bCounter;
    return {
      loc: loc,
      sloc: sloc,
      cloc: totalC,
      scloc: cCounter,
      mcloc: bCounter,
      nloc: nloc
    };
  };

  slocModule.extensions = ["coffeescript", "coffee", "python", "py", "javascript", "js", "c", "cc", "java", "php", "php5", "go", "lua", "scss", "less", "css", "styl", "stylus", "html"];

  slocModule.keys = keys;

  if ((typeof define !== "undefined" && define !== null ? define.amd : void 0) != null) {
    define(function() {
      return slocModule;
    });
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = slocModule;
  } else if (typeof window !== "undefined" && window !== null) {
    window.sloc = slocModule;
  }

}).call(this);
