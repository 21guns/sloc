// Generated by CoffeeScript 1.3.3

/*
This program is distributed under the terms of the GPLv3 license.
Copyright 2012 (c) Markus Kohlhase <mail@markus-kohlhase.de>
*/


(function() {
  var async, fs, getExtension, parseDir, parseFile, print, programm, sloc, stats;

  fs = require('fs');

  async = require('async');

  sloc = require('./sloc');

  programm = require('commander');

  getExtension = function(f) {
    var i;
    i = f.lastIndexOf('.');
    if (i < 0) {
      return '';
    } else {
      return f.substr(i).slice(1);
    }
  };

  parseFile = function(f, cb) {
    return fs.readFile(f, "utf8", function(err, code) {
      if (err) {
        console.error(err);
        return typeof cb === "function" ? cb(err) : void 0;
      } else {
        return typeof cb === "function" ? cb(null, sloc(code, getExtension(f))) : void 0;
      }
    });
  };

  parseDir = function(dir, cb) {
    var f, files, parseFunctions, _fn, _i, _len;
    files = (function() {
      var _i, _len, _ref, _results;
      _ref = fs.readdirSync(dir);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push("" + dir + "/" + f);
      }
      return _results;
    })();
    parseFunctions = [];
    _fn = function(f) {
      return parseFunctions.push(function(next) {
        return parseFile(f, next);
      });
    };
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      f = files[_i];
      _fn(f);
    }
    return async.parallel(parseFunctions, function(err, res) {
      if (err != null) {
        return cb(err);
      } else {
        return cb(null, res.reduce(function(a, b) {
          var k, o, v;
          o = {};
          for (k in a) {
            v = a[k];
            o[k] = a[k] + b[k];
          }
          return o;
        }));
      }
    });
  };

  print = function(err, r) {
    if (err != null) {
      return console.error(err);
    } else if (programm.json) {
      return console.log(JSON.stringify(r));
    } else if (programm.sloc) {
      return console.log(r.sloc);
    } else {
      return console.log("---------- result ------------\n     physical :  " + r.loc + "\n       source :  " + r.sloc + "\ntotal comment :  " + r.cloc + "\n   singleline :  " + r.scloc + "\n    multiline :  " + r.mcloc + "\n        empty :  " + r.nloc + "\n------------------------------");
    }
  };

  programm.version('0.0.2').usage('[option] <file>|<directory>').option('-j, --json', 'return JSON object').option('-s, --sloc', 'print only number of source lines');

  programm.parse(process.argv);

  stats = fs.lstatSync(programm.args[0]);

  if (stats.isDirectory()) {
    parseDir(programm.args[0], print);
  } else if (stats.isFile()) {
    parseFile(programm.args[0], print);
  }

}).call(this);
